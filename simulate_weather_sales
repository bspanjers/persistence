#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue May 28 17:03:47 2024

@author: admin
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Function to create yearly Fourier terms with a constant
def create_fourier_terms(t, num_terms=2, amplitude=5):
    terms = []
    for k in range(1, num_terms + 1):
        terms.append(amplitude * np.sin(2 * np.pi * k * t / 365))
        terms.append(amplitude * np.cos(2 * np.pi * k * t / 365))
    return np.vstack(terms).T

# Function to simulate data with added Fourier terms
def simulate_data_with_fourier(corr_temp_profit, iN=365*4, num_fourier_terms=2, amplitude=5):
    t = np.arange(iN)
    y = np.zeros(iN)
    y[0] = 6000
    fourier_terms = create_fourier_terms(t, num_fourier_terms, amplitude)
    u_t =  np.random.uniform(0,1, iN)
    for day in t[1:]:
        seasonal_component = np.dot(fourier_terms[day], np.ones(num_fourier_terms * 2))
        y[day] = 100 + 0.9 * y[day-1] + seasonal_component + np.random.normal(0, 20) + 1000 * u_t[day]
    
    return y, fourier_terms, u_t

# Simulate the data
corr_temp_profit = 0.1
simulated_data, fourier_terms, u_t = simulate_data_with_fourier(corr_temp_profit, amplitude=10)

# Plot the simulated data and u_t in separate subplots
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8))

# Plot simulated_data
ax1.plot(simulated_data, label='Simulated Data with Seasonality')
ax1.set_xlabel('Days')
ax1.set_ylabel('Value')
ax1.set_title('Simulated Data with Yearly Seasonality')
ax1.legend()
ax1.grid(True)

# Plot u_t
ax2.plot(u_t, label='u_t Data', color='orange')
ax2.set_xlabel('Days')
ax2.set_ylabel('Value')
ax2.set_title('u_t Data')
ax2.legend()
ax2.grid(True)

# Adjust layout to prevent overlap
plt.tight_layout()

# Show the plot
plt.show()